import static org.gradle.api.JavaVersion.VERSION_11
import static org.gradle.api.tasks.bundling.Compression.GZIP

plugins {
    id "java"
    id "application"
    id "distribution"
    id "jacoco"
    id "com.github.ben-manes.versions" version "0.29.0"
    id "info.solidsoft.pitest" version "1.5.2"
    // See https://www.baeldung.com/lombok-ide for how to configure intellij to work with lombok
    id "io.freefair.lombok" version "5.1.1"
    id "com.gorylenko.gradle-git-properties" version "2.2.3"
    id "org.springframework.boot" version "2.3.3.RELEASE"
}

mainClassName = "net.trilogy.arch.Application"
version = "0.1.6"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //Google
    implementation "com.google.apis:google-api-services-docs:v1-rev46-1.25.0"
    implementation "com.google.api-client:google-api-client:1.30.10"
    implementation "com.google.oauth-client:google-oauth-client-jetty:1.31.0"

    //Guava
    implementation "com.google.guava:guava:29.0-jre"

    //Structurizr
    implementation "com.structurizr:structurizr-client:1.5.0"
    implementation "com.google.code.gson:gson:2.8.6"

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation group: "org.eclipse.jgit", name: "org.eclipse.jgit", version: "5.8.1.202007141445-r"

    implementation group: "guru.nidi", name: "graphviz-java-all-j2v8",
version: "0.17.0"

    //Command line arguments
    implementation "info.picocli:picocli:4.5.1"
    annotationProcessor "info.picocli:picocli-codegen:4.5.1"

    //vavr
    implementation "io.vavr:vavr:0.10.2"

    //yaml
    implementation "com.networknt:json-schema-validator:1.0.43"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.2"
    implementation "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.10.2"

    //json
    implementation "org.json:json:20200518"

    //logging
    implementation group: "org.apache.logging.log4j", name: "log4j-api", version: "2.13.3"
    implementation group: "org.apache.logging.log4j", name: "log4j-core", version: "2.13.3"
    implementation group: "org.apache.logging.log4j", name: "log4j-slf4j-impl", version: "2.13.3"
    implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.30"

    //Testing
    //Makesure hamcrest is above junit see - https://stackoverflow.com/questions/7869711/getting-nosuchmethoderror-org-hamcrest-matcher-describemismatch-when-running
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    testImplementation "junit:junit:4.13"
    testImplementation group: "commons-io", name: "commons-io", version: "2.7"
    testImplementation "org.mockito:mockito-core:3.5.7"
    testImplementation "pl.pragmatists:JUnitParams:1.1.1"
}

java {
    sourceCompatibility = VERSION_11
    targetCompatibility = VERSION_11
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all,-serial" << "-Werror"
    options.encoding = "UTF-8"
}

test {
    finalizedBy jacocoTestReport // Provide coverage report ASAP
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.94
            }
        }
    }
}

jacocoTestReport {
    dependsOn test

    reports {
        xml.enabled = true
        // Use standard location for HTML coverage results
        html.enabled = true
        csv.enabled = false
    }
}

check {
    dependsOn jacocoTestCoverageVerification
}

plugins.withType(DistributionPlugin) {
    distTar {
        compression = GZIP
        extension = "tar.gz"
    }
}

pitest {
    // TODO: Work with PITest (GitHub issues) to resolve the complaints
    targetClasses = ["net.trilogy.*"]
    threads = 4
    outputFormats = ["XML", "HTML"]
    timestampedReports = true
}

project.test {
    def outputCache = new LinkedList<String>()

    beforeTest { TestDescriptor td -> outputCache.clear() }

    onOutput {
        TestDescriptor td, TestOutputEvent toe ->
            outputCache.add(toe.getMessage())
            while (outputCache.size() > 1000) outputCache.remove()
    }

    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat = "FULL"
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = false
    }

    afterTest {
        TestDescriptor td, TestResult tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE) {
                println()
                println(" Output of ${td.className}.${td.name}:")
                outputCache.each { print(" > $it") }
            }
    }
}

bootJar {
    mainClassName = "net.trilogy.arch.Application"
}
